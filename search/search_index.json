{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Misc benchmarks for JSON serialization Notes \u00b6 These benchmarks compare\u2026 Gson, Moshi, kotlinx serialization Reflective vs streaming APIs (via code gen) Moshi\u2019s Kotlin support (reflective or code gen for streaming APIs) Note Kotlinx serialization only works via the standard compiler plugin \u201cMinified\u201d means the JSON was minified with whitespaces between keys and values removed. Note this is only relevant for deserialization. AutoValue APIs are done via AutoValue models with the auto-value-gson/Moshi extensions, thus using generated adapters. Kotlin codegen generates Kotlin JsonAdapters. Reflection is done usually on a simple class due to limitations of instantiation. Moshi\u2019s reflection library is the exception (it can handle data class types) String serialization is a practical example, buffered input/output is likely more representative of how your stack works in terms of I/O Latest results TL;DR \u00b6 Fastest reader: Moshi Fastest writer: Moshi Speed is not everything though! Different libraries come with different trade offs. That said, these are benchmarks. Running locally \u00b6 To run: ./gradlew jmh You can use respective *DataParser.kt files to parse the raw results (starting with the first benchmark line after the headers).","title":"Home"},{"location":"#notes","text":"These benchmarks compare\u2026 Gson, Moshi, kotlinx serialization Reflective vs streaming APIs (via code gen) Moshi\u2019s Kotlin support (reflective or code gen for streaming APIs) Note Kotlinx serialization only works via the standard compiler plugin \u201cMinified\u201d means the JSON was minified with whitespaces between keys and values removed. Note this is only relevant for deserialization. AutoValue APIs are done via AutoValue models with the auto-value-gson/Moshi extensions, thus using generated adapters. Kotlin codegen generates Kotlin JsonAdapters. Reflection is done usually on a simple class due to limitations of instantiation. Moshi\u2019s reflection library is the exception (it can handle data class types) String serialization is a practical example, buffered input/output is likely more representative of how your stack works in terms of I/O","title":"Notes"},{"location":"#latest-results-tldr","text":"Fastest reader: Moshi Fastest writer: Moshi Speed is not everything though! Different libraries come with different trade offs. That said, these are benchmarks.","title":"Latest results TL;DR"},{"location":"#running-locally","text":"To run: ./gradlew jmh You can use respective *DataParser.kt files to parse the raw results (starting with the first benchmark line after the headers).","title":"Running locally"},{"location":"changelog/","text":"Changelog \u00b6 2019-12-01 \u00b6 Changelog started, current state of project.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#2019-12-01","text":"Changelog started, current state of project.","title":"2019-12-01"},{"location":"contributing/","text":"Contributing to this repo \u00b6 This project is first and foremost a simple benchmarking test project that I mostly use for periodic comparisons of Moshi, Gson, and kotlinx-serialization. In the past it\u2019s compared other serializers, but making this an exhaustive benchmarking suite of different tools is a non-goal. That said, I\u2019m not against PRs adding new tools as long as they fit the existing suite. Do\u2019s If your PR modifies or adds a benchmark, please update the benchmark results. Be sure to include your machine\u2019s tech specs. If adding a new benchmark, explain what value it\u2019s adding and why it\u2019s relevant. If modifying a benchmark, explain what issue it\u2019s resolving or benefit it\u2019s adding. If removing a benchmark, please open an issue first to discuss. Dependency updates are welcome! Don\u2019ts Add a new serialization tool without discussing in an issue first. If you want to demo one without wanting to have it merged, that\u2019s welcome and just mark it as a draft PR and then close it after.","title":"Contributing"},{"location":"contributing/#contributing-to-this-repo","text":"This project is first and foremost a simple benchmarking test project that I mostly use for periodic comparisons of Moshi, Gson, and kotlinx-serialization. In the past it\u2019s compared other serializers, but making this an exhaustive benchmarking suite of different tools is a non-goal. That said, I\u2019m not against PRs adding new tools as long as they fit the existing suite. Do\u2019s If your PR modifies or adds a benchmark, please update the benchmark results. Be sure to include your machine\u2019s tech specs. If adding a new benchmark, explain what value it\u2019s adding and why it\u2019s relevant. If modifying a benchmark, explain what issue it\u2019s resolving or benefit it\u2019s adding. If removing a benchmark, please open an issue first to discuss. Dependency updates are welcome! Don\u2019ts Add a new serialization tool without discussing in an issue first. If you want to demo one without wanting to have it merged, that\u2019s welcome and just mark it as a draft PR and then close it after.","title":"Contributing to this repo"},{"location":"results/jmh/","text":"Current raw JMH results (higher score is better) \u00b6 Run on a mid-2015 15\u201d Macbook Pro. 2.8 GHz Intel Core i7, 16 GB 1600 MHz DDR3 Raw Benchmark Mode Cnt Score Error Units SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.250 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.840 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.050 \u00b1 77.249 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.050 ops/s SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.480 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s Grouped by serialization type (read, write, buffered, string): Read (buffered) SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.05 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.25 ops/s SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s Read (string) SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s Write (buffered) SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.05 \u00b1 77.249 ops/s SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.84 ops/s Write (string) SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.48 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s Grouped by library (interesting to see how reflection vs custom adapters affects perf within a library): GSON SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.25 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.84 ops/s Kotlinx Serialization SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s Moshi SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.05 \u00b1 77.249 ops/s SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s Moshi Kotlin SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.48 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.05 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s","title":"Jmh"},{"location":"results/jmh/#current-raw-jmh-results-higher-score-is-better","text":"Run on a mid-2015 15\u201d Macbook Pro. 2.8 GHz Intel Core i7, 16 GB 1600 MHz DDR3 Raw Benchmark Mode Cnt Score Error Units SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.250 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.840 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.050 \u00b1 77.249 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.050 ops/s SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.480 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s Grouped by serialization type (read, write, buffered, string): Read (buffered) SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.05 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.25 ops/s SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s Read (string) SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s Write (buffered) SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.05 \u00b1 77.249 ops/s SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.84 ops/s Write (string) SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.48 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s Grouped by library (interesting to see how reflection vs custom adapters affects perf within a library): GSON SpeedTest.gson_autovalue_string_fromJson_minified thrpt 25 1422.573 \u00b1 17.722 ops/s SpeedTest.gson_reflective_string_fromJson thrpt 25 1388.944 \u00b1 24.591 ops/s SpeedTest.gson_autovalue_buffer_fromJson_minified thrpt 25 1336.091 \u00b1 16.25 ops/s SpeedTest.gson_autovalue_string_fromJson thrpt 25 1295.682 \u00b1 24.112 ops/s SpeedTest.gson_autovalue_buffer_fromJson thrpt 25 1222.809 \u00b1 6.776 ops/s SpeedTest.gson_autovalue_string_toJson thrpt 25 1212.849 \u00b1 17.831 ops/s SpeedTest.gson_reflective_string_toJson thrpt 25 1012.079 \u00b1 9.862 ops/s SpeedTest.gson_autovalue_buffer_toJson thrpt 25 642.586 \u00b1 19.84 ops/s Kotlinx Serialization SpeedTest.kserializer_string_fromJson_minified thrpt 25 1639.444 \u00b1 14.787 ops/s SpeedTest.kserializer_string_fromJson thrpt 25 1413.365 \u00b1 13.823 ops/s SpeedTest.kserializer_string_toJson thrpt 25 1340.387 \u00b1 8.966 ops/s Moshi SpeedTest.moshi_autovalue_buffer_toJson thrpt 25 1577.05 \u00b1 77.249 ops/s SpeedTest.moshi_autovalue_string_toJson thrpt 25 1477.759 \u00b1 12.712 ops/s SpeedTest.moshi_reflective_string_toJson thrpt 25 1420.034 \u00b1 17.002 ops/s SpeedTest.moshi_autovalue_string_fromJson_minified thrpt 25 1199.122 \u00b1 9.959 ops/s SpeedTest.moshi_autovalue_buffer_fromJson thrpt 25 974.813 \u00b1 12.968 ops/s SpeedTest.moshi_autovalue_buffer_fromJson_minified thrpt 25 959.581 \u00b1 13.067 ops/s SpeedTest.moshi_autovalue_string_fromJson thrpt 25 888.303 \u00b1 6.405 ops/s SpeedTest.moshi_reflective_string_fromJson thrpt 25 791.379 \u00b1 11.537 ops/s Moshi Kotlin SpeedTest.moshi_kotlin_codegen_buffer_toJson thrpt 25 1572.972 \u00b1 95.974 ops/s SpeedTest.moshi_kotlin_codegen_string_toJson thrpt 25 1473.877 \u00b1 14.48 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson_minified thrpt 25 1375.027 \u00b1 35.05 ops/s SpeedTest.moshi_kotlin_reflective_buffer_toJson thrpt 25 1372.856 \u00b1 22.928 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson_minified thrpt 25 1205.473 \u00b1 7.955 ops/s SpeedTest.moshi_kotlin_reflective_string_toJson thrpt 25 1186.398 \u00b1 21.733 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson_minified thrpt 25 1128.853 \u00b1 9.983 ops/s SpeedTest.moshi_kotlin_codegen_buffer_fromJson thrpt 25 984.343 \u00b1 14.441 ops/s SpeedTest.moshi_kotlin_codegen_string_fromJson thrpt 25 872.131 \u00b1 5.331 ops/s SpeedTest.moshi_kotlin_reflective_buffer_fromJson thrpt 25 838.602 \u00b1 7.488 ops/s SpeedTest.moshi_kotlin_reflective_string_fromJson thrpt 25 741.541 \u00b1 24.851 ops/s","title":"Current raw JMH results (higher score is better)"}]}